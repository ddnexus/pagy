{
  "version": 3,
  "sources": ["../../src/pagy.ts"],
  "sourcesContent": [
    "interface SyncData {\n  from?: number\n  to?:   number\n  key:   string\n  str?:  string\n}\ntype InitArgs = [\"k\",  KeynavArgs] |          // series_nav[_js] with keynav instance\n                [\"snj\", SeriesNavJsArgs] |    // series_nav_js\n                [\"inj\", InputNavJsArgs] |     // input_nav_js\n                [\"ltj\", LimitTagJsArgs]       // limit_tag_js\ntype AugmentKeynav = (nav:HTMLElement, keynavArgs:KeynavArgs) => Promise<((page: string) => string)>\ntype KeynavArgs = readonly [storageKey:  string | null,\n                            pageKey:     string,\n                            last:        number,\n                            spliceArgs?: SpliceArgs]\ntype SpliceArgs = readonly [start:       number,\n                            deleteCount: number,     // it would be optional, but ts complains\n                            ...items:    Cutoff[]]\ntype Cutoff = readonly (string | number | boolean)[]\ntype AugmentedPage = [browserId:   string,\n                      storageKey:  string,\n                      pageNumber:  number,\n                      pages:       number,\n                      priorCutoff: Cutoff | null,\n                      pageCutoff:  Cutoff | null]\ntype SeriesNavJsArgs = readonly [NavJsTokens, NavJsSeries, KeynavArgs?]\ntype NavJsSeries = readonly [widths: number[],\n                             series: (string | number)[][],\n                             labels: string[][] | null]\ntype InputNavJsArgs = readonly [urlToken: string, KeynavArgs?]\ntype LimitTagJsArgs = readonly [from:     number,\n                                urlToken: string]\ntype NavJsTokens = readonly [before:  string,\n                             anchor:  string,\n                             current: string,\n                             gap:     string,\n                             after:   string]\ninterface NavJsElement extends HTMLElement {\n  render(): void\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Pagy = (() => {\n  const storageSupport = 'sessionStorage' in window && 'BroadcastChannel' in window,\n        pageRe         = \"P \";  // shorten the compiled size\n  // eslint-disable-next-line prefer-const\n  let pagy = \"pagy\", storage: Storage, sync: BroadcastChannel, tabId: number;\n  if (storageSupport) {\n    storage = sessionStorage; // shorten the compiled size\n    sync    = new BroadcastChannel(pagy);\n    tabId   = Date.now();\n    // Sync the sessionStorage keys for the cutoffs opened in a new tab/window\n    sync.addEventListener(\"message\", (e:MessageEvent<SyncData>) => {\n      if (e.data.from) { // request cutoffs\n        const cutoffs = storage.getItem(e.data.key);\n        if (cutoffs) {\n          sync.postMessage(<SyncData>{to: e.data.from, key: e.data.key, str: cutoffs});\n        } // send response\n      } else if (e.data.to) {  // receive cutoffs\n        if (e.data.to == tabId) {\n          storage.setItem(e.data.key, <string>e.data.str);\n        }\n      }\n    });\n  }\n  // The observer instance for responsive navs\n  const rjsObserver = new ResizeObserver(\n      entries => entries.forEach(e => {\n        e.target.querySelectorAll<NavJsElement>(\".pagy-rjs\").forEach(el => el.render());\n      }));\n\n  /* Full set of B64 functions\n  const B64Encode     = (unicode:string) => btoa(String.fromCharCode(...(new TextEncoder).encode(unicode))),\n        B64Safe       = (unsafe:string)  => unsafe.replace(/[+/=]/g, (m) => m == \"+\" ? \"-\" : m == \"/\" ? \"_\" : \"\"),\n        B64SafeEncode = (unicode:string) => B64Safe(B64Encode(unicode)),\n        B64Decode     = (base64:string)  => (new TextDecoder()).decode(Uint8Array.from(atob(base64), c => c.charCodeAt(0))),\n        B64Unsafe     = (safe:string)    => safe.replace(/[-_]/g, (match) => match == \"-\" ? \"+\" : \"/\"),\n        B64SafeDecode = (base64:string)  => B64Decode(B64Unsafe(base64))\n  */\n  const B64SafeEncode = (unicode:string) => btoa(String.fromCharCode(...(new TextEncoder).encode(unicode)))\n                                            .replace(/[+/=]/g, (m) => m == \"+\" ? \"-\" : m == \"/\" ? \"_\" : \"\"),\n        B64Decode     = (base64:string)  => (new TextDecoder()).decode(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n\n  // Return a random key: 3 chars max, base-36 number < 36**3\n  const randKey = () => Math.floor(Math.random() * 36 ** 3).toString(36);\n\n  // Manage the page augmentation for Keynav, called only if storageSupport\n  const augmentKeynav: AugmentKeynav = async (nav, [storageKey, pageKey, last, spliceArgs]) => {\n    let augment;\n    const browserKey = document.cookie.split(/;\\s+/)  // it works even if malformed\n                               .find((row) => row.startsWith(pagy + \"=\"))\n                               ?.split(\"=\")[1] ?? randKey();\n    document.cookie = pagy + \"=\" + browserKey;  // Smaller .min size: set the cookie without checking\n    if (storageKey && !(storageKey in storage)) {\n      // Sync the sessiongStorage from other tabs/windows (e.g. open page in new tab/window)\n      sync.postMessage(<SyncData>{ from: tabId, key: storageKey });\n      // Wait for the listener to copy the cutoffs in the current sessionStorage\n      await new Promise<string|null>((resolve) => setTimeout(() => resolve(\"\"), 100));\n      if (!(storageKey in storage)) { // the storageKey didn't get copied: fallback to countless pagination\n        augment = (page: string) => page + '+' + last;\n      }\n    }\n    if (!augment) { // regular keynav pagination\n      if (!storageKey) { do { storageKey = randKey() } while (storageKey in storage) } // no dup keys\n      const data = storage.getItem(storageKey),\n          cutoffs = <Cutoff[]>(data ? JSON.parse(data) : [undefined]);\n      if (spliceArgs) {\n        cutoffs.splice(...spliceArgs);\n        storage.setItem(storageKey, JSON.stringify(cutoffs));\n      }\n      // Augment function\n      augment = (page:string) => {\n        const pageNum = parseInt(page);\n        return B64SafeEncode(JSON.stringify(\n            <AugmentedPage>[browserKey,\n                            storageKey,\n                            pageNum,\n                            cutoffs.length,       // pages/last\n                            cutoffs[pageNum - 1], // priorCutoff\n                            cutoffs[pageNum]]));  // pageCutoff\n      };\n    }\n    // Augment the page param of each href\n    for (const a of <NodeListOf<HTMLAnchorElement>><unknown>nav.querySelectorAll('a[href]')) {\n      const url = a.href,\n            re  = new RegExp(`(?<=\\\\?.*)\\\\b${pageKey}=(\\\\d+)`);   // find the numeric page from pageKey\n      a.href    = url.replace(re, pageKey + \"=\" + augment(url.match(re)![1]));  // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n    // Return the augment function for furter augmentation (i.e. url token in input_nav_js)\n    return augment;\n  };\n\n  // Build the series_nav_js helper\n  const buildNavJs = (nav:NavJsElement, [[before, anchor, current, gap, after],\n                                        [widths, series, labels], keynavArgs]:SeriesNavJsArgs) => {\n    const  parent = <HTMLElement>nav.parentElement;\n    let lastWidth = -1;\n    (nav.render = () => {\n      const index = widths.findIndex(w => w < parent.clientWidth);\n      if (widths[index] === lastWidth) { return } // no change: abort\n\n      let html = before;\n      series[index].forEach((item, i) => {\n        // Avoid if blocks and chain results for shorter .min and easier reading\n        html += item == \"gap\" ? gap :\n                // @ts-expect-error the item may be a number, but 'replace' type converts it to string (shorter .min)\n                (typeof item == \"number\" ? anchor.replace(pageRe, item) : current)\n                    .replace(\"L<\", labels?.[index][i] ?? item + \"<\");\n      });\n      html         += after;\n      nav.innerHTML = \"\";\n      nav.insertAdjacentHTML(\"afterbegin\", html);\n      lastWidth = widths[index];\n      if (keynavArgs && storageSupport) { void augmentKeynav(nav, keynavArgs) }\n    })();\n    if (nav.classList.contains(pagy + \"-rjs\")) { rjsObserver.observe(parent) }\n  };\n\n  // Init the input_nav_js helpers\n  const initInputNavJs = async (nav:HTMLElement, [url_token, keynavArgs]:InputNavJsArgs) => {\n    const augment = keynavArgs && storageSupport\n                    ? await augmentKeynav(nav, keynavArgs)\n                    : (page: string) => page;\n    initInput(nav, inputValue => url_token.replace(pageRe, augment(inputValue)));\n  };\n\n  // Init the limit_tag_js helper\n  const initLimitTagJs = (span:HTMLSpanElement, [from, url_token]:LimitTagJsArgs) => {\n    initInput(span, inputValue => {\n      // @ts-expect-error the page is a number, but 'replace' type converts it to string (shorter .min)\n      return url_token.replace(pageRe, Math.max(Math.ceil(from / parseInt(inputValue)), 1))\n                      .replace('L ', inputValue);\n    });\n  };\n\n  // Init the input element\n  const initInput = (element:HTMLElement, getUrl:(v:string) => string) => {\n    const input   = <HTMLInputElement>element.querySelector(\"input\"),\n          link    = <HTMLAnchorElement>element.querySelector(\"a\"),\n          initial = input.value,\n          action  = () => {\n                      if (input.value === initial) { return }  // not changed\n                      const [min, val, max] = [input.min, input.value, input.max].map(n => parseInt(n) || 0);\n                      if (val < min || val > max) {  // reset invalid/out-of-range\n                        input.value = initial;\n                        input.select();\n                        return;\n                      }\n                      link.href = getUrl(input.value);\n                      link.click();\n                    };\n    input.addEventListener(\"focus\", () => input.select());\n    input.addEventListener(\"focusout\", action);\n    input.addEventListener(\"keypress\", e => { if (e.key == \"Enter\") { action() } });\n  };\n\n  // Public interface\n  return {\n    version: \"43.0.0\",\n\n    // Scan for elements with a \"data-pagy\" attribute and call their init functions with the decoded args\n    init(arg?:HTMLElement) {\n      const target   = arg instanceof HTMLElement ? arg : document,\n            elements = target.querySelectorAll(\"[data-pagy]\");\n      for (const element of <NodeListOf<HTMLElement>>elements) {\n        try {\n          const [helperId, ...args] = <InitArgs>JSON.parse(B64Decode(<string>element.getAttribute(\"data-pagy\")));\n          if (helperId == \"k\") {\n            // @ts-expect-error spread 2 arguments, not 3 as it complains about\n            void augmentKeynav(element, ...<KeynavArgs><unknown>args);\n          } else if (helperId == \"snj\") {\n            buildNavJs(<NavJsElement>element, <SeriesNavJsArgs><unknown>args);\n          } else if (helperId == \"inj\") {\n            void initInputNavJs(element, <InputNavJsArgs><unknown>args);\n          } else if (helperId == \"ltj\") {\n            initLimitTagJs(element, <LimitTagJsArgs><unknown>args);\n          }\n          // else { console.warn(\"Pagy.init: %o\\nUnknown helperId '%s'\", element, helperId) }\n        } catch (err) { console.warn(\"Pagy.init: %o\\n%s\", element, err) }\n      }\n    }\n  };\n})();\n"
  ],
  "mappings": "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",
  "debugId": "A445A612C9DC53D564756E2164756E21",
  "names": []
}
