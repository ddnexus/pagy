{
  "version": 3,
  "sources": ["../../src/pagy.ts"],
  "sourcesContent": [
    "interface SyncData {\n  from?: number\n  to?:   number\n  key:   string\n  str?:  string\n}\ntype InitArgs = [\"n\",  NavKeysetArgs] |\n                [\"nj\", NavJsArgs] |\n                [\"cj\", ComboNavJsArgs] |\n                [\"sj\", SelectorJsArgs]\n\ntype NavKeysetArgs = readonly [pageSym: string,\n                               update:  [storageKey: string, spliceArgs?: SpliceArgs]]\n\ntype SpliceArgs = readonly [start:       number,\n                            deleteCount: number,     // it would be optional, but ts complains\n                            ...items:    Cutoff[]]\n\ntype Cutoff = readonly (string | number | boolean)[]\n\ntype AugmentedPageParams = [browserId:   string,\n                            storageKey:  string,\n                            pageNumber:  number,\n                            pages:       number,\n                            prevCutoff?: Cutoff,\n                            pageCutoff?: Cutoff]\n\ntype NavJsArgs = readonly [Tokens,\n                           widths: number[],\n                           series: (string | number)[][],\n                           labels: string[][] | null,\n                           NavKeysetArgs?]\n\ntype ComboNavJsArgs = readonly [urlToken:string]\n\ntype SelectorJsArgs = readonly [from:     number,\n                                urlToken: string]\n\ntype Tokens = readonly [before:  string,\n                        anchor:  string,\n                        current: string,\n                        gap:     string,\n                        after:   string]\n\ninterface NavJsElement extends HTMLElement {\n  render(): void\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Pagy = (() => {\n  const storageSupport = 'sessionStorage' in window && 'BroadcastChannel' in window,\n        pageRe         = \"P \";  // shorten the compiled size\n  // eslint-disable-next-line prefer-const\n  let pagy = \"pagy\", storage: Storage, sync: BroadcastChannel, tabId: number;\n  if (storageSupport) {\n    storage = sessionStorage; // shorten the compiled size\n    sync    = new BroadcastChannel(pagy);\n    tabId   = Date.now();\n    // Sync the sessionStorage keys for the cutoffs opened in a new tab/window\n    sync.addEventListener(\"message\", (e:MessageEvent<SyncData>) => {\n      if (e.data.from) { // request cutoffs\n        const cutoffs = storage.getItem(e.data.key);\n        if (cutoffs) {\n          sync.postMessage(<SyncData>{to: e.data.from, key: e.data.key, str: cutoffs});\n        } // send response\n      } else if (e.data.to) {  // receive cutoffs\n        if (e.data.to == tabId) {\n          storage.setItem(e.data.key, <string>e.data.str);\n        }\n      }\n    });\n  }\n  // The observer instance for responsive navs\n  const rjsObserver = new ResizeObserver(\n      entries => entries.forEach(e => {\n        e.target.querySelectorAll<NavJsElement>(\".pagy-rjs\").forEach(el => el.render());\n      }));\n\n  const B64Encode     = (unicode:string) => btoa(String.fromCharCode(...(new TextEncoder).encode(unicode))),\n        B64Safe       = (unsafe:string)  => unsafe.replace(/=/g, \"\").replace(/[+/]/g, (match) => match == \"+\" ? \"-\" : \"_\"),\n        B64SafeEncode = (unicode:string) => B64Safe(B64Encode(unicode)),\n        B64Decode     = (base64:string)  => (new TextDecoder()).decode(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n        /* B64Unsafe     = (safe:string) => safe.replace(/[-_]/g, (match) => match == \"-\" ? \"+\" : \"/\"),\n           B64SafeDecode = (base64:string) => B64Decode(B64Unsafe(base64)) */\n\n  // Return a random key: 3 chars max, base-36 number < 36**3\n  const randKey = () => Math.floor(Math.random() * 36 ** 3).toString(36);\n\n  // Init for KeysetForUI paginated navs\n  const initNavKeyset = async (nav:HTMLElement, [pageSym, [storageKey, spliceArgs]]:NavKeysetArgs) => {\n    if (!storageSupport) { return }\n\n    let browserKey = document.cookie.split(/;\\s+/)  // it works even if malformed\n                             .find((row) => row.startsWith(pagy + \"=\"))\n                             ?.split(\"=\")[1];\n    if (!browserKey) { document.cookie = pagy + \"=\" + (browserKey = randKey()) }\n    if (storageKey && !(storageKey in storage)) {\n      // Sync the sessiongStorage from other tabs/windows (e.g. open page in new tab/window)\n      sync.postMessage(<SyncData>{ from: tabId, key: storageKey });\n      // Wait for the listener to copy the cutoffs in the current sessionStorage\n      await new Promise<string|null>((resolve) => setTimeout(() => resolve(\"\"), 100));\n    }\n    if (!storageKey) { do { storageKey = randKey() } while (storageKey in storage) } // no dup keys\n    const data    = storage.getItem(storageKey),\n          cutoffs = <Cutoff[]>(data ? JSON.parse(data) : [undefined]);\n    if (spliceArgs) {\n      cutoffs.splice(...spliceArgs);\n      storage.setItem(storageKey, JSON.stringify(cutoffs));\n    }\n    // Augment the page param of each href\n    for (const a of <NodeListOf<HTMLAnchorElement>><unknown>nav.querySelectorAll('a[href]')) {\n      const url     = a.href,\n            re      = new RegExp(`(?<=\\\\?.*)\\\\b${pageSym}=([\\\\d]+)`),  // find the numeric page\n            pageNum = parseInt(<string>url.match(re)?.[1]),            // page=\\d+ is always in href\n            value   = B64SafeEncode(JSON.stringify(\n                          <AugmentedPageParams>[browserKey,\n                                                storageKey,\n                                                pageNum,\n                                                cutoffs.length,       // pages/last\n                                                cutoffs[pageNum - 1], // prevCutoff\n                                                cutoffs[pageNum]]));  // pageCutoff\n      a.href = url.replace(re, pageSym + \"=\" + value);\n    }\n  };\n\n  // Init the *_nav_js helper\n  const initNavJs = (nav:NavJsElement, [[before, anchor, current, gap, after],\n                     widths, series, labels, keysetArgs]:NavJsArgs) => {\n    const  parent = <HTMLElement>nav.parentElement;\n    let lastWidth = -1;\n    (nav.render = () => {\n      const index = widths.findIndex(w => w < parent.clientWidth);\n      if (widths[index] === lastWidth) { return } // no change: abort\n\n      let html = before;\n      series[index].forEach((item, i) => {\n        // Avoid if blocks and chain results for shorter .min and easier reading\n        html += item == \"gap\" ? gap :\n                // @ts-expect-error the item may be a number, but 'replace' type converts it to string (shorter .min)\n                (typeof item == \"number\" ? anchor.replace(pageRe, item) : current)\n                        .replace(\"L<\", labels?.[index][i] ?? item + \"<\");\n      });\n      html         += after;\n      nav.innerHTML = \"\";\n      nav.insertAdjacentHTML(\"afterbegin\", html);\n      lastWidth = widths[index];\n      if (keysetArgs) { void initNavKeyset(nav, keysetArgs) }\n    })();\n    if (nav.classList.contains(pagy + \"-rjs\")) { rjsObserver.observe(parent) }\n  };\n\n  // Init the *_combo_nav_js helpers\n  const initComboJs = (nav:HTMLElement, [url_token]:ComboNavJsArgs) =>\n      initInput(nav, inputValue => url_token.replace(pageRe, inputValue));\n\n  // Init the limit_selector_js helper\n  const initSelectorJs = (span:HTMLSpanElement, [from, url_token]:SelectorJsArgs) => {\n    initInput(span, inputValue => {\n      // @ts-expect-error the page is a number, but 'replace' type converts it to string (shorter .min)\n      return url_token.replace(pageRe, Math.max(\n          Math.ceil(from / parseInt(inputValue)), 1))\n                      .replace('L ', inputValue);\n    });\n  };\n\n  // Init the input element\n  const initInput = (element:HTMLElement, getUrl:(v:string) => string) => {\n    const input   = <HTMLInputElement>element.querySelector(\"input\"),\n          link    = <HTMLAnchorElement>element.querySelector(\"a\"),\n          initial = input.value,\n          action  = () => {\n      if (input.value === initial) { return }  // not changed\n      const [min, val, max] = [input.min, input.value, input.max].map(n => parseInt(n) || 0);\n      if (val < min || val > max) {  // reset invalid/out-of-range\n        input.value = initial;\n        input.select();\n        return;\n      }\n      link.href = getUrl(input.value);\n      link.click();\n    };\n    [\"change\", \"focus\"].forEach(e => input.addEventListener(e, () => input.select()));  // auto-select\n    input.addEventListener(\"focusout\", action);                                         // trigger action\n    input.addEventListener(\"keypress\", e => { if (e.key == \"Enter\") { action() } });    // trigger action\n  };\n\n  // Public interface\n  return {\n    version: \"9.3.3\",\n\n    // Scan for elements with a \"data-pagy\" attribute and call their init functions with the decoded args\n    init(arg?:HTMLElement) {\n      const target   = arg instanceof HTMLElement ? arg : document,\n            elements = target.querySelectorAll(\"[data-pagy]\");\n      for (const element of <NodeListOf<HTMLElement>>elements) {\n        try {\n          const [helperId, ...args] = <InitArgs>JSON.parse(B64Decode(<string>element.getAttribute(\"data-pagy\")));\n          if (helperId == \"n\") {\n            void initNavKeyset(element, <NavKeysetArgs><unknown>args);\n          } else if (helperId == \"nj\") {\n            initNavJs(<NavJsElement>element, <NavJsArgs><unknown>args);\n          } else if (helperId == \"cj\") {\n            initComboJs(element, <ComboNavJsArgs><unknown>args);\n          } else if (helperId == \"sj\") {\n            initSelectorJs(element, <SelectorJsArgs><unknown>args);\n          }\n          // else { console.warn(\"Pagy.init: %o\\nUnknown helperId '%s'\", element, helperId) }\n        } catch (err) { console.warn(\"Pagy.init: %o\\n%s\", element, err) }\n      }\n    }\n  };\n})();\n"
  ],
  "mappings": "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",
  "debugId": "207D48046B75BED164756E2164756E21",
  "names": []
}