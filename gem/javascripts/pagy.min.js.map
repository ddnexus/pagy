{
  "version": 3,
  "sources": ["../../src/pagy.ts"],
  "sourcesContent": [
    "type NavArgs      = readonly [Tokens, Sequels, null | LabelSequels, string?]\ntype ComboArgs    = readonly [string, string?]\ntype SelectorArgs = readonly [number, string, string?]\ntype JsonArgs     = ['nav', NavArgs] | ['combo', ComboArgs] | ['selector', SelectorArgs]\n\ninterface Tokens {\n  readonly before:string\n  readonly a:string\n  readonly current:string\n  readonly gap:string\n  readonly after:string\n}\ninterface Sequels {readonly [width:string]:(string | number)[]}\ninterface LabelSequels {readonly [width:string]:string[]}\ninterface NavElement extends Element {pagyRender():void}\n\nconst Pagy = (() => {\n  // The observer instance for responsive navs\n  const rjsObserver = new ResizeObserver(\n      entries => entries.forEach(e => e.target.querySelectorAll<NavElement>(\".pagy-rjs\")\n                                       .forEach(el => el.pagyRender())));\n  // Init the *_nav_js helpers\n  const initNav = (el:NavElement, [tokens, sequels, labelSequels, trimParam]:NavArgs) => {\n    const container = el.parentElement ?? el;\n    const widths    = Object.keys(sequels).map(w => parseInt(w)).sort((a, b) => b - a);\n    let lastWidth   = -1;\n    const fillIn    = (a:string, page:string, label:string):string =>\n        a.replace(/__pagy_page__/g, page).replace(/__pagy_label__/g, label);\n    (el.pagyRender = function () {\n      const width = widths.find(w => w < container.clientWidth) || 0;\n      if (width === lastWidth) { return } // no change: abort\n      let html     = tokens.before;  // already trimmed in html\n      const series = sequels[width.toString()];\n      const labels = labelSequels?.[width.toString()] ?? series.map(l => l.toString());\n      series.forEach((item, i) => {\n        const label = labels[i];\n        let filled;\n        if (typeof item === \"number\") {\n          filled = fillIn(tokens.a, item.toString(), label);\n        } else if (item === \"gap\") {\n          filled = tokens.gap;\n        } else { // active page\n          filled = fillIn(tokens.current, item, label);\n        }\n        html += (typeof trimParam === \"string\" && item == 1) ? trim(filled, trimParam) : filled;\n      });\n      html        += tokens.after;\n      el.innerHTML = \"\";\n      el.insertAdjacentHTML(\"afterbegin\", html);\n      lastWidth = width;\n    })();\n    if (el.classList.contains(\"pagy-rjs\")) { rjsObserver.observe(container) }\n  };\n\n  // Init the *_combo_nav_js helpers\n  const initCombo = (el:Element, [url_token, trimParam]:ComboArgs) =>\n      initInput(el, inputValue => [inputValue, url_token.replace(/__pagy_page__/, inputValue)], trimParam);\n\n  // Init the limit_selector_js helper\n  const initSelector = (el:Element, [from, url_token, trimParam]:SelectorArgs) => {\n    initInput(el, inputValue => {\n      const page = Math.max(Math.ceil(from / parseInt(inputValue)), 1).toString();\n      const url  = url_token.replace(/__pagy_page__/, page).replace(/__pagy_limit__/, inputValue);\n      return [page, url];\n    }, trimParam);\n  };\n\n  // Init the input element\n  const initInput = (el:Element, getVars:(v:string) => [string, string], trimParam?:string) => {\n    const input   = el.querySelector(\"input\") as HTMLInputElement;\n    const link    = el.querySelector(\"a\") as HTMLAnchorElement;\n    const initial = input.value;\n    const action  = function () {\n      if (input.value === initial) { return }  // not changed\n      const [min, val, max] = [input.min, input.value, input.max].map(n => parseInt(n) || 0);\n      if (val < min || val > max) {  // reset invalid/out-of-range\n        input.value = initial;\n        input.select();\n        return;\n      }\n      let [page, url] = getVars(input.value);   // eslint-disable-line prefer-const\n      if (typeof trimParam === \"string\" && page === \"1\") { url = trim(url, trimParam) }\n      link.href = url;\n      link.click();\n    };\n    [\"change\", \"focus\"].forEach(e => input.addEventListener(e, () => input.select()));  // auto-select\n    input.addEventListener(\"focusout\", action);                                         // trigger action\n    input.addEventListener(\"keypress\", e => { if (e.key === \"Enter\") { action() } });   // trigger action\n  };\n\n  // Trim the ${page-param}=1 params in links\n  const trim = (a:string, param:string) =>\n      a.replace(new RegExp(`[?&]${param}=1\\\\b(?!&)|\\\\b${param}=1&`), \"\");\n\n  // Public interface\n  return {\n    version: \"9.1.0\",\n\n    // Scan for elements with a \"data-pagy\" attribute and call their init functions with the decoded args\n    init(arg?:Element) {\n      const target   = arg instanceof Element ? arg : document;\n      const elements = target.querySelectorAll(\"[data-pagy]\");\n      for (const el of elements) {\n        try {\n          const uint8array         = Uint8Array.from(atob(el.getAttribute(\"data-pagy\") as string), c => c.charCodeAt(0));\n          const [keyword, ...args] = JSON.parse((new TextDecoder()).decode(uint8array)) as JsonArgs; // base64-utf8 -> JSON -> Array\n          if (keyword === \"nav\") {\n            initNav(el as NavElement, args as unknown as NavArgs);\n          } else if (keyword === \"combo\") {\n            initCombo(el, args as unknown as ComboArgs);\n          } else if (keyword === \"selector\") {\n            initSelector(el, args as unknown as SelectorArgs);\n          } else {\n            console.warn(\"Skipped Pagy.init() for: %o\\nUnknown keyword '%s'\", el, keyword);\n          }\n        } catch (err) { console.warn(\"Skipped Pagy.init() for: %o\\n%s\", el, err) }\n      }\n    }\n  };\n})();\n\nexport default Pagy;\n"
  ],
  "mappings": "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",
  "debugId": "66A02CDC8780B4A264756E2164756E21",
  "names": []
}